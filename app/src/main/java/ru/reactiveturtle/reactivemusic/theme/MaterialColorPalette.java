package ru.reactiveturtle.reactivemusic.theme;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import ru.reactiveturtle.reactivemusic.toolkit.ReactiveList;

public final class MaterialColorPalette {
    public static final Map<ColorType, ColorSet> M_50;
    public static final Map<ColorType, ColorSet> M_100;
    public static final Map<ColorType, ColorSet> M_200;
    public static final Map<ColorType, ColorSet> M_300;
    public static final Map<ColorType, ColorSet> M_400;
    public static final Map<ColorType, ColorSet> M_500;
    public static final Map<ColorType, ColorSet> M_600;
    public static final Map<ColorType, ColorSet> M_700;
    public static final Map<ColorType, ColorSet> M_800;
    public static final Map<ColorType, ColorSet> M_900;
    public static final Map<ColorType, ColorSet> M_A100;
    public static final Map<ColorType, ColorSet> M_A200;
    public static final Map<ColorType, ColorSet> M_A400;
    public static final Map<ColorType, ColorSet> M_A700;

    static {
        Map<ColorType, ColorSet> m50 = new HashMap<>();
        m50.put(ColorType.RED, new ColorSet(0xffccb9bc, 0xffffebee, 0xffffffff));
        m50.put(ColorType.PINK, new ColorSet(0xffc9b2ba, 0xfffce4ec, 0xffffffff));
        m50.put(ColorType.PURPLE, new ColorSet(0xffc0b3c2, 0xfff3e5f5, 0xffffffff));
        m50.put(ColorType.DEEP_PURPLE, new ColorSet(0xffbbb5c3, 0xffede7f6, 0xffffffff));
        m50.put(ColorType.INDIGO, new ColorSet(0xffb6b8c3, 0xffe8eaf6, 0xffffffff));
        m50.put(ColorType.BLUE, new ColorSet(0xffb1bfca, 0xffe3f2fd, 0xffffffff));
        m50.put(ColorType.LIGHT_BLUE, new ColorSet(0xffafc2cb, 0xffe1f5fe, 0xffffffff));
        m50.put(ColorType.CYAN, new ColorSet(0xffaec4c7, 0xffe0f7fa, 0xffffffff));
        m50.put(ColorType.TEAL, new ColorSet(0xffaebfbe, 0xffe0f2f1, 0xffffffff));
        m50.put(ColorType.GREEN, new ColorSet(0xffb6c2b7, 0xffe8f5e9, 0xffffffff));
        m50.put(ColorType.LIGHT_GREEN, new ColorSet(0xffbec5b7, 0xfff1f8e9, 0xffffffff));
        m50.put(ColorType.LIME, new ColorSet(0xffc6c8b5, 0xfff9fbe7, 0xffffffff));
        m50.put(ColorType.YELLOW, new ColorSet(0xffcccab5, 0xfffffde7, 0xffffffff));
        m50.put(ColorType.AMBER, new ColorSet(0xffccc5af, 0xfffff8e1, 0xffffffff));
        m50.put(ColorType.ORANGE, new ColorSet(0xffccc0ae, 0xfffff3e0, 0xffffffff));
        m50.put(ColorType.DEEP_ORANGE, new ColorSet(0xffc8b7b5, 0xfffbe9e7, 0xffffffff));
        m50.put(ColorType.BROWN, new ColorSet(0xffbdb9b7, 0xffefebe9, 0xffffffff));
        m50.put(ColorType.GREY, new ColorSet(0xffc7c7c7, 0xfffafafa, 0xffffffff));
        m50.put(ColorType.BLUE_GREY, new ColorSet(0xffbabdbe, 0xffeceff1, 0xffffffff));
        M_50 = Collections.unmodifiableMap(m50);

        Map<ColorType, ColorSet> m100 = new HashMap<>();
        m100.put(ColorType.RED, new ColorSet(0xffcb9ca1, 0xffffcdd2, 0xffffffff));
        m100.put(ColorType.PINK, new ColorSet(0xffc48b9f, 0xfff8bbd0, 0xffffeeff));
        m100.put(ColorType.PURPLE, new ColorSet(0xffaf8eb5, 0xffe1bee7, 0xfffff1ff));
        m100.put(ColorType.DEEP_PURPLE, new ColorSet(0xffa094b7, 0xffd1c4e9, 0xfffff7ff));
        m100.put(ColorType.INDIGO, new ColorSet(0xff9499b7, 0xffc5cae9, 0xfff8fdff));
        m100.put(ColorType.BLUE, new ColorSet(0xff8aacc8, 0xffbbdefb, 0xffeeffff));
        m100.put(ColorType.LIGHT_BLUE, new ColorSet(0xff82b3c9, 0xffb3e5fc, 0xffe6ffff));
        m100.put(ColorType.CYAN, new ColorSet(0xff81b9bf, 0xffb2ebf2, 0xffe5ffff));
        m100.put(ColorType.TEAL, new ColorSet(0xff82ada9, 0xffb2dfdb, 0xffe5ffff));
        m100.put(ColorType.GREEN, new ColorSet(0xff97b498, 0xffc8e6c9, 0xfffbfffc));
        m100.put(ColorType.LIGHT_GREEN, new ColorSet(0xffaabb97, 0xffdcedc8, 0xfffffffb));
        m100.put(ColorType.LIME, new ColorSet(0xffbdc192, 0xfff0f4c3, 0xfffffff6));
        m100.put(ColorType.YELLOW, new ColorSet(0xffcbc693, 0xfffff9c4, 0xfffffff7));
        m100.put(ColorType.AMBER, new ColorSet(0xffcbba83, 0xffffecb3, 0xffffffe5));
        m100.put(ColorType.ORANGE, new ColorSet(0xffcbae82, 0xffffe0b2, 0xffffffe4));
        m100.put(ColorType.DEEP_ORANGE, new ColorSet(0xffcb9b8c, 0xffffccbc, 0xffffffee));
        m100.put(ColorType.BROWN, new ColorSet(0xffa69b97, 0xffd7ccc8, 0xfffffffb));
        m100.put(ColorType.GREY, new ColorSet(0xffc2c2c2, 0xfff5f5f5, 0xffffffff));
        m100.put(ColorType.BLUE_GREY, new ColorSet(0xff9ea7aa, 0xffcfd8dc, 0xffffffff));
        M_100 = Collections.unmodifiableMap(m100);

        Map<ColorType, ColorSet> m200 = new HashMap<>();
        m200.put(ColorType.RED, new ColorSet(0xffba6b6c, 0xffef9a9a, 0xffffcccb));
        m200.put(ColorType.PINK, new ColorSet(0xffbf5f82, 0xfff48fb1, 0xffffc1e3));
        m200.put(ColorType.PURPLE, new ColorSet(0xff9c64a6, 0xffce93d8, 0xffffc4ff));
        m200.put(ColorType.DEEP_PURPLE, new ColorSet(0xff836fa9, 0xffb39ddb, 0xffe6ceff));
        m200.put(ColorType.INDIGO, new ColorSet(0xff6f79a8, 0xff9fa8da, 0xffd1d9ff));
        m200.put(ColorType.BLUE, new ColorSet(0xff5d99c6, 0xff90caf9, 0xffc3fdff));
        m200.put(ColorType.LIGHT_BLUE, new ColorSet(0xff4ba3c7, 0xff81d4fa, 0xffb6ffff));
        m200.put(ColorType.CYAN, new ColorSet(0xff4bacb8, 0xff80deea, 0xffb4ffff));
        m200.put(ColorType.TEAL, new ColorSet(0xff4f9a94, 0xff80cbc4, 0xffb2fef7));
        m200.put(ColorType.GREEN, new ColorSet(0xff75a478, 0xffa5d6a7, 0xffd7ffd9));
        m200.put(ColorType.LIGHT_GREEN, new ColorSet(0xff94af76, 0xffc5e1a5, 0xfff8ffd7));
        m200.put(ColorType.LIME, new ColorSet(0xffb3bc6d, 0xffe6ee9c, 0xffffffce));
        m200.put(ColorType.YELLOW, new ColorSet(0xffcbc26d, 0xfffff59d, 0xffffffcf));
        m200.put(ColorType.AMBER, new ColorSet(0xffcaae53, 0xffffe082, 0xffffffb3));
        m200.put(ColorType.ORANGE, new ColorSet(0xffca9b52, 0xffffcc80, 0xffffffb0));
        m200.put(ColorType.DEEP_ORANGE, new ColorSet(0xffc97b63, 0xffffab91, 0xffffddc1));
        m200.put(ColorType.BROWN, new ColorSet(0xff8c7b75, 0xffbcaaa4, 0xffefdcd5));
        m200.put(ColorType.GREY, new ColorSet(0xffbcbcbc, 0xffeeeeee, 0xffffffff));
        m200.put(ColorType.BLUE_GREY, new ColorSet(0xff808e95, 0xffb0bec5, 0xffe2f1f8));
        M_200 = Collections.unmodifiableMap(m200);

        Map<ColorType, ColorSet> m300 = new HashMap<>();
        m300.put(ColorType.RED, new ColorSet(0xffaf4448, 0xffe57373, 0xffffa4a2));
        m300.put(ColorType.PINK, new ColorSet(0xffba2d65, 0xfff06292, 0xffff94c2));
        m300.put(ColorType.PURPLE, new ColorSet(0xff883997, 0xffba68c8, 0xffee98fb));
        m300.put(ColorType.DEEP_PURPLE, new ColorSet(0xff65499c, 0xff9575cd, 0xffc7a4ff));
        m300.put(ColorType.INDIGO, new ColorSet(0xff49599a, 0xff7986cb, 0xffaab6fe));
        m300.put(ColorType.BLUE, new ColorSet(0xff2286c3, 0xff64b5f6, 0xff9be7ff));
        m300.put(ColorType.LIGHT_BLUE, new ColorSet(0xff0093c4, 0xff4fc3f7, 0xff8bf6ff));
        m300.put(ColorType.CYAN, new ColorSet(0xff009faf, 0xff4dd0e1, 0xff88ffff));
        m300.put(ColorType.TEAL, new ColorSet(0xff00867d, 0xff4db6ac, 0xff82e9de));
        m300.put(ColorType.GREEN, new ColorSet(0xff519657, 0xff81c784, 0xffb2fab4));
        m300.put(ColorType.LIGHT_GREEN, new ColorSet(0xff7da453, 0xffaed581, 0xffe1ffb1));
        m300.put(ColorType.LIME, new ColorSet(0xffa8b545, 0xffdce775, 0xffffffa6));
        m300.put(ColorType.YELLOW, new ColorSet(0xffcabf45, 0xfffff176, 0xffffffa8));
        m300.put(ColorType.AMBER, new ColorSet(0xffc8a415, 0xffffd54f, 0xffffff81));
        m300.put(ColorType.ORANGE, new ColorSet(0xffc88719, 0xffffb74d, 0xffffe97d));
        m300.put(ColorType.DEEP_ORANGE, new ColorSet(0xffc75b39, 0xffff8a65, 0xffffbb93));
        m300.put(ColorType.BROWN, new ColorSet(0xff725b53, 0xffa1887f, 0xffd3b8ae));
        m300.put(ColorType.GREY, new ColorSet(0xffaeaeae, 0xffe0e0e0, 0xffffffff));
        m300.put(ColorType.BLUE_GREY, new ColorSet(0xff62757f, 0xff90a4ae, 0xffc1d5e0));
        M_300 = Collections.unmodifiableMap(m300);

        Map<ColorType, ColorSet> m400 = new HashMap<>();
        m400.put(ColorType.RED, new ColorSet(0xffb61827, 0xffef5350, 0xffff867c));
        m400.put(ColorType.PINK, new ColorSet(0xffb4004e, 0xffec407a, 0xffff77a9));
        m400.put(ColorType.PURPLE, new ColorSet(0xff790e8b, 0xffab47bc, 0xffdf78ef));
        m400.put(ColorType.DEEP_PURPLE, new ColorSet(0xff4d2c91, 0xff7e57c2, 0xffb085f5));
        m400.put(ColorType.INDIGO, new ColorSet(0xff26418f, 0xff5c6bc0, 0xff8e99f3));
        m400.put(ColorType.BLUE, new ColorSet(0xff0077c2, 0xff42a5f5, 0xff80d6ff));
        m400.put(ColorType.LIGHT_BLUE, new ColorSet(0xff0086c3, 0xff29b6f6, 0xff73e8ff));
        m400.put(ColorType.CYAN, new ColorSet(0xff0095a8, 0xff26c6da, 0xff6ff9ff));
        m400.put(ColorType.TEAL, new ColorSet(0xff00766c, 0xff26a69a, 0xff64d8cb));
        m400.put(ColorType.GREEN, new ColorSet(0xff338a3e, 0xff66bb6a, 0xff98ee99));
        m400.put(ColorType.LIGHT_GREEN, new ColorSet(0xff6b9b37, 0xff9ccc65, 0xffcfff95));
        m400.put(ColorType.LIME, new ColorSet(0xffa0af22, 0xffd4e157, 0xffffff89));
        m400.put(ColorType.YELLOW, new ColorSet(0xffc9bc1f, 0xffffee58, 0xffffff8b));
        m400.put(ColorType.AMBER, new ColorSet(0xffc79a00, 0xffffca28, 0xfffffd61));
        m400.put(ColorType.ORANGE, new ColorSet(0xffc77800, 0xffffa726, 0xffffd95b));
        m400.put(ColorType.DEEP_ORANGE, new ColorSet(0xffc63f17, 0xffff7043, 0xffffa270));
        m400.put(ColorType.BROWN, new ColorSet(0xff5f4339, 0xff8d6e63, 0xffbe9c91));
        m400.put(ColorType.GREY, new ColorSet(0xff8d8d8d, 0xffbdbdbd, 0xffefefef));
        m400.put(ColorType.BLUE_GREY, new ColorSet(0xff4b636e, 0xff78909c, 0xffa7c0cd));
        M_400 = Collections.unmodifiableMap(m400);

        Map<ColorType, ColorSet> m500 = new HashMap<>();
        m500.put(ColorType.RED, new ColorSet(0xffba000d, 0xfff44336, 0xffff7961));
        m500.put(ColorType.PINK, new ColorSet(0xffb0003a, 0xffe91e63, 0xffff6090));
        m500.put(ColorType.PURPLE, new ColorSet(0xff6a0080, 0xff9c27b0, 0xffd05ce3));
        m500.put(ColorType.DEEP_PURPLE, new ColorSet(0xff320b86, 0xff673ab7, 0xff9a67ea));
        m500.put(ColorType.INDIGO, new ColorSet(0xff002984, 0xff3f51b5, 0xff757de8));
        m500.put(ColorType.BLUE, new ColorSet(0xff0069c0, 0xff2196f3, 0xff6ec6ff));
        m500.put(ColorType.LIGHT_BLUE, new ColorSet(0xff007ac1, 0xff03a9f4, 0xff67daff));
        m500.put(ColorType.CYAN, new ColorSet(0xff008ba3, 0xff00bcd4, 0xff62efff));
        m500.put(ColorType.TEAL, new ColorSet(0xff00675b, 0xff009688, 0xff52c7b8));
        m500.put(ColorType.GREEN, new ColorSet(0xff087f23, 0xff4caf50, 0xff80e27e));
        m500.put(ColorType.LIGHT_GREEN, new ColorSet(0xff5a9216, 0xff8bc34a, 0xffbef67a));
        m500.put(ColorType.LIME, new ColorSet(0xff99aa00, 0xffcddc39, 0xffffff6e));
        m500.put(ColorType.YELLOW, new ColorSet(0xffc8b900, 0xffffeb3b, 0xffffff72));
        m500.put(ColorType.AMBER, new ColorSet(0xffc79100, 0xffffc107, 0xfffff350));
        m500.put(ColorType.ORANGE, new ColorSet(0xffc66900, 0xffff9800, 0xffffc947));
        m500.put(ColorType.DEEP_ORANGE, new ColorSet(0xffc41c00, 0xffff5722, 0xffff8a50));
        m500.put(ColorType.BROWN, new ColorSet(0xff4b2c20, 0xff795548, 0xffa98274));
        m500.put(ColorType.GREY, new ColorSet(0xff707070, 0xff9e9e9e, 0xffcfcfcf));
        m500.put(ColorType.BLUE_GREY, new ColorSet(0xff34515e, 0xff607d8b, 0xff8eacbb));
        M_500 = Collections.unmodifiableMap(m500);

        Map<ColorType, ColorSet> m600 = new HashMap<>();
        m600.put(ColorType.RED, new ColorSet(0xffab000d, 0xffe53935, 0xffff6f60));
        m600.put(ColorType.PINK, new ColorSet(0xffa00037, 0xffd81b60, 0xffff5c8d));
        m600.put(ColorType.PURPLE, new ColorSet(0xff5c007a, 0xff8e24aa, 0xffc158dc));
        m600.put(ColorType.DEEP_PURPLE, new ColorSet(0xff280680, 0xff5e35b1, 0xff9162e4));
        m600.put(ColorType.INDIGO, new ColorSet(0xff00227b, 0xff3949ab, 0xff6f74dd));
        m600.put(ColorType.BLUE, new ColorSet(0xff005cb2, 0xff1e88e5, 0xff6ab7ff));
        m600.put(ColorType.LIGHT_BLUE, new ColorSet(0xff006db3, 0xff039be5, 0xff63ccff));
        m600.put(ColorType.CYAN, new ColorSet(0xff007c91, 0xff00acc1, 0xff5ddef4));
        m600.put(ColorType.TEAL, new ColorSet(0xff005b4f, 0xff00897b, 0xff4ebaaa));
        m600.put(ColorType.GREEN, new ColorSet(0xff00701a, 0xff43a047, 0xff76d275));
        m600.put(ColorType.LIGHT_GREEN, new ColorSet(0xff4b830d, 0xff7cb342, 0xffaee571));
        m600.put(ColorType.LIME, new ColorSet(0xff8c9900, 0xffc0ca33, 0xfff5fd67));
        m600.put(ColorType.YELLOW, new ColorSet(0xffc6a700, 0xfffdd835, 0xffffff6b));
        m600.put(ColorType.AMBER, new ColorSet(0xffc68400, 0xffffb300, 0xffffe54c));
        m600.put(ColorType.ORANGE, new ColorSet(0xffc25e00, 0xfffb8c00, 0xffffbd45));
        m600.put(ColorType.DEEP_ORANGE, new ColorSet(0xffb91400, 0xfff4511e, 0xffff844c));
        m600.put(ColorType.BROWN, new ColorSet(0xff40241a, 0xff6d4c41, 0xff9c786c));
        m600.put(ColorType.GREY, new ColorSet(0xff494949, 0xff757575, 0xffa4a4a4));
        m600.put(ColorType.BLUE_GREY, new ColorSet(0xff29434e, 0xff546e7a, 0xff819ca9));
        M_600 = Collections.unmodifiableMap(m600);

        Map<ColorType, ColorSet> m700 = new HashMap<>();
        m700.put(ColorType.RED, new ColorSet(0xff9a0007, 0xffd32f2f, 0xffff6659));
        m700.put(ColorType.PINK, new ColorSet(0xff8c0032, 0xffc2185b, 0xfffa5788));
        m700.put(ColorType.PURPLE, new ColorSet(0xff4a0072, 0xff7b1fa2, 0xffae52d4));
        m700.put(ColorType.DEEP_PURPLE, new ColorSet(0xff140078, 0xff512da8, 0xff8559da));
        m700.put(ColorType.INDIGO, new ColorSet(0xff001970, 0xff303f9f, 0xff666ad1));
        m700.put(ColorType.BLUE, new ColorSet(0xff004ba0, 0xff1976d2, 0xff63a4ff));
        m700.put(ColorType.LIGHT_BLUE, new ColorSet(0xff005b9f, 0xff0288d1, 0xff5eb8ff));
        m700.put(ColorType.CYAN, new ColorSet(0xff006978, 0xff0097a7, 0xff56c8d8));
        m700.put(ColorType.TEAL, new ColorSet(0xff004c40, 0xff00796b, 0xff48a999));
        m700.put(ColorType.GREEN, new ColorSet(0xff00600f, 0xff388e3c, 0xff6abf69));
        m700.put(ColorType.LIGHT_GREEN, new ColorSet(0xff387002, 0xff689f38, 0xff99d066));
        m700.put(ColorType.LIME, new ColorSet(0xff7c8500, 0xffafb42b, 0xffe4e65e));
        m700.put(ColorType.YELLOW, new ColorSet(0xffc49000, 0xfffbc02d, 0xfffff263));
        m700.put(ColorType.AMBER, new ColorSet(0xffc67100, 0xffffa000, 0xffffd149));
        m700.put(ColorType.ORANGE, new ColorSet(0xffbb4d00, 0xfff57c00, 0xffffad42));
        m700.put(ColorType.DEEP_ORANGE, new ColorSet(0xffac0800, 0xffe64a19, 0xffff7d47));
        m700.put(ColorType.BROWN, new ColorSet(0xff321911, 0xff5d4037, 0xff8b6b61));
        m700.put(ColorType.GREY, new ColorSet(0xff373737, 0xff616161, 0xff8e8e8e));
        m700.put(ColorType.BLUE_GREY, new ColorSet(0xff1c313a, 0xff455a64, 0xff718792));
        M_700 = Collections.unmodifiableMap(m700);

        Map<ColorType, ColorSet> m800 = new HashMap<>();
        m800.put(ColorType.RED, new ColorSet(0xff8e0000, 0xffc62828, 0xffff5f52));
        m800.put(ColorType.PINK, new ColorSet(0xff78002e, 0xffad1457, 0xffe35183));
        m800.put(ColorType.PURPLE, new ColorSet(0xff38006b, 0xff6a1b9a, 0xff9c4dcc));
        m800.put(ColorType.DEEP_PURPLE, new ColorSet(0xff000070, 0xff4527a0, 0xff7953d2));
        m800.put(ColorType.INDIGO, new ColorSet(0xff001064, 0xff283593, 0xff5f5fc4));
        m800.put(ColorType.BLUE, new ColorSet(0xff003c8f, 0xff1565c0, 0xff5e92f3));
        m800.put(ColorType.LIGHT_BLUE, new ColorSet(0xff004c8c, 0xff0277bd, 0xff58a5f0));
        m800.put(ColorType.CYAN, new ColorSet(0xff005662, 0xff00838f, 0xff4fb3bf));
        m800.put(ColorType.TEAL, new ColorSet(0xff003d33, 0xff00695c, 0xff439889));
        m800.put(ColorType.GREEN, new ColorSet(0xff005005, 0xff2e7d32, 0xff60ad5e));
        m800.put(ColorType.LIGHT_GREEN, new ColorSet(0xff255d00, 0xff558b2f, 0xff85bb5c));
        m800.put(ColorType.LIME, new ColorSet(0xff6c6f00, 0xff9e9d24, 0xffd2ce56));
        m800.put(ColorType.YELLOW, new ColorSet(0xffc17900, 0xfff9a825, 0xffffd95a));
        m800.put(ColorType.AMBER, new ColorSet(0xffc56000, 0xffff8f00, 0xffffc046));
        m800.put(ColorType.ORANGE, new ColorSet(0xffb53d00, 0xffef6c00, 0xffff9d3f));
        m800.put(ColorType.DEEP_ORANGE, new ColorSet(0xff9f0000, 0xffd84315, 0xffff7543));
        m800.put(ColorType.BROWN, new ColorSet(0xff260e04, 0xff4e342e, 0xff7b5e57));
        m800.put(ColorType.GREY, new ColorSet(0xff1b1b1b, 0xff424242, 0xff6d6d6d));
        m800.put(ColorType.BLUE_GREY, new ColorSet(0xff102027, 0xff37474f, 0xff62727b));
        M_800 = Collections.unmodifiableMap(m800);

        Map<ColorType, ColorSet> m900 = new HashMap<>();
        m900.put(ColorType.RED, new ColorSet(0xff7f0000, 0xffb71c1c, 0xfff05545));
        m900.put(ColorType.PINK, new ColorSet(0xff560027, 0xff880e4f, 0xffbc477b));
        m900.put(ColorType.PURPLE, new ColorSet(0xff12005e, 0xff4a148c, 0xff7c43bd));
        m900.put(ColorType.DEEP_PURPLE, new ColorSet(0xff000063, 0xff311b92, 0xff6746c3));
        m900.put(ColorType.INDIGO, new ColorSet(0xff000051, 0xff1a237e, 0xff534bae));
        m900.put(ColorType.BLUE, new ColorSet(0xff002171, 0xff0d47a1, 0xff5472d3));
        m900.put(ColorType.LIGHT_BLUE, new ColorSet(0xff002f6c, 0xff01579b, 0xff4f83cc));
        m900.put(ColorType.CYAN, new ColorSet(0xff00363a, 0xff006064, 0xff428e92));
        m900.put(ColorType.TEAL, new ColorSet(0xff00251a, 0xff004d40, 0xff39796b));
        m900.put(ColorType.GREEN, new ColorSet(0xff003300, 0xff1b5e20, 0xff4c8c4a));
        m900.put(ColorType.LIGHT_GREEN, new ColorSet(0xff003d00, 0xff33691e, 0xff629749));
        m900.put(ColorType.LIME, new ColorSet(0xff524c00, 0xff827717, 0xffb4a647));
        m900.put(ColorType.YELLOW, new ColorSet(0xffbc5100, 0xfff57f17, 0xffffb04c));
        m900.put(ColorType.AMBER, new ColorSet(0xffc43e00, 0xffff6f00, 0xffffa040));
        m900.put(ColorType.ORANGE, new ColorSet(0xffac1900, 0xffe65100, 0xffff833a));
        m900.put(ColorType.DEEP_ORANGE, new ColorSet(0xff870000, 0xffbf360c, 0xfff9683a));
        m900.put(ColorType.BROWN, new ColorSet(0xff1b0000, 0xff3e2723, 0xff6a4f4b));
        m900.put(ColorType.GREY, new ColorSet(0xff000000, 0xff212121, 0xff484848));
        m900.put(ColorType.BLUE_GREY, new ColorSet(0xff000a12, 0xff263238, 0xff4f5b62));
        M_900 = Collections.unmodifiableMap(m900);

        Map<ColorType, ColorSet> mA100 = new HashMap<>();
        mA100.put(ColorType.RED, new ColorSet(0xffc85a54, 0xffff8a80, 0xffffbcaf));
        mA100.put(ColorType.PINK, new ColorSet(0xffc94f7c, 0xffff80ab, 0xffffb2dd));
        mA100.put(ColorType.PURPLE, new ColorSet(0xffb64fc8, 0xffea80fc, 0xffffb2ff));
        mA100.put(ColorType.DEEP_PURPLE, new ColorSet(0xff805acb, 0xffb388ff, 0xffe7b9ff));
        mA100.put(ColorType.INDIGO, new ColorSet(0xff5870cb, 0xff8c9eff, 0xffc0cfff));
        mA100.put(ColorType.BLUE, new ColorSet(0xff4d82cb, 0xff82b1ff, 0xffb6e3ff));
        mA100.put(ColorType.LIGHT_BLUE, new ColorSet(0xff49a7cc, 0xff80d8ff, 0xffb5ffff));
        mA100.put(ColorType.CYAN, new ColorSet(0xff4bcbcc, 0xff84ffff, 0xffbaffff));
        mA100.put(ColorType.TEAL, new ColorSet(0xff75ccb9, 0xffa7ffeb, 0xffdbffff));
        mA100.put(ColorType.GREEN, new ColorSet(0xff88c399, 0xffb9f6ca, 0xffecfffd));
        mA100.put(ColorType.LIGHT_GREEN, new ColorSet(0xff99cc60, 0xffccff90, 0xffffffc2));
        mA100.put(ColorType.LIME, new ColorSet(0xffbfcc50, 0xfff4ff81, 0xffffffb3));
        mA100.put(ColorType.YELLOW, new ColorSet(0xffcacc5d, 0xffffff8d, 0xffffffbf));
        mA100.put(ColorType.AMBER, new ColorSet(0xffcab350, 0xffffe57f, 0xffffffb0));
        mA100.put(ColorType.ORANGE, new ColorSet(0xffcaa052, 0xffffd180, 0xffffffb1));
        mA100.put(ColorType.DEEP_ORANGE, new ColorSet(0xffc96f53, 0xffff9e80, 0xffffd0b0));
        M_A100 = Collections.unmodifiableMap(mA100);

        Map<ColorType, ColorSet> mA200 = new HashMap<>();
        mA200.put(ColorType.RED, new ColorSet(0xffc50e29, 0xffff5252, 0xffff867f));
        mA200.put(ColorType.PINK, new ColorSet(0xffc60055, 0xffff4081, 0xffff79b0));
        mA200.put(ColorType.PURPLE, new ColorSet(0xffaa00c7, 0xffe040fb, 0xffff79ff));
        mA200.put(ColorType.DEEP_PURPLE, new ColorSet(0xff3f1dcb, 0xff7c4dff, 0xffb47cff));
        mA200.put(ColorType.INDIGO, new ColorSet(0xff0043ca, 0xff536dfe, 0xff8f9bff));
        mA200.put(ColorType.BLUE, new ColorSet(0xff005ecb, 0xff448aff, 0xff83b9ff));
        mA200.put(ColorType.LIGHT_BLUE, new ColorSet(0xff0094cc, 0xff40c4ff, 0xff82f7ff));
        mA200.put(ColorType.CYAN, new ColorSet(0xff00cbcc, 0xff18ffff, 0xff76ffff));
        mA200.put(ColorType.TEAL, new ColorSet(0xff14cba8, 0xff64ffda, 0xff9effff));
        mA200.put(ColorType.GREEN, new ColorSet(0xff2bbd7e, 0xff69f0ae, 0xff9fffe0));
        mA200.put(ColorType.LIGHT_GREEN, new ColorSet(0xff7ecb20, 0xffb2ff59, 0xffe7ff8c));
        mA200.put(ColorType.LIME, new ColorSet(0xffb8cc00, 0xffeeff41, 0xffffff78));
        mA200.put(ColorType.YELLOW, new ColorSet(0xffc7cc00, 0xffffff00, 0xffffff5a));
        mA200.put(ColorType.AMBER, new ColorSet(0xffc8a600, 0xffffd740, 0xffffff74));
        mA200.put(ColorType.ORANGE, new ColorSet(0xffc77c02, 0xffffab40, 0xffffdd71));
        mA200.put(ColorType.DEEP_ORANGE, new ColorSet(0xffc53d13, 0xffff6e40, 0xffffa06d));
        M_A200 = Collections.unmodifiableMap(mA200);

        Map<ColorType, ColorSet> mA400 = new HashMap<>();
        mA400.put(ColorType.RED, new ColorSet(0xffc4001d, 0xffff1744, 0xffff616f));
        mA400.put(ColorType.PINK, new ColorSet(0xffbb002f, 0xfff50057, 0xffff5983));
        mA400.put(ColorType.PURPLE, new ColorSet(0xff9e00c5, 0xffd500f9, 0xffff5bff));
        mA400.put(ColorType.DEEP_PURPLE, new ColorSet(0xff0100ca, 0xff651fff, 0xffa255ff));
        mA400.put(ColorType.INDIGO, new ColorSet(0xff0031ca, 0xff3d5afe, 0xff8187ff));
        mA400.put(ColorType.BLUE, new ColorSet(0xff004ecb, 0xff2979ff, 0xff75a7ff));
        mA400.put(ColorType.LIGHT_BLUE, new ColorSet(0xff0081cb, 0xff00b0ff, 0xff69e2ff));
        mA400.put(ColorType.CYAN, new ColorSet(0xff00b2cc, 0xff00e5ff, 0xff6effff));
        mA400.put(ColorType.TEAL, new ColorSet(0xff00b686, 0xff1de9b6, 0xff6effe8));
        mA400.put(ColorType.GREEN, new ColorSet(0xff00b248, 0xff00e676, 0xff66ffa6));
        mA400.put(ColorType.LIGHT_GREEN, new ColorSet(0xff32cb00, 0xff76ff03, 0xffb0ff57));
        mA400.put(ColorType.LIME, new ColorSet(0xff90cc00, 0xffc6ff00, 0xfffdff58));
        mA400.put(ColorType.YELLOW, new ColorSet(0xffc7b800, 0xffffea00, 0xffffff56));
        mA400.put(ColorType.AMBER, new ColorSet(0xffc79400, 0xffffc400, 0xfffff64f));
        mA400.put(ColorType.ORANGE, new ColorSet(0xffc56200, 0xffff9100, 0xffffc246));
        mA400.put(ColorType.DEEP_ORANGE, new ColorSet(0xffc30000, 0xffff3d00, 0xffff7539));
        M_A400 = Collections.unmodifiableMap(mA400);

        Map<ColorType, ColorSet> mA700 = new HashMap<>();
        mA700.put(ColorType.RED, new ColorSet(0xff9b0000, 0xffd50000, 0xffff5131));
        mA700.put(ColorType.PINK, new ColorSet(0xff8e0038, 0xffc51162, 0xfffd558f));
        mA700.put(ColorType.PURPLE, new ColorSet(0xff7200ca, 0xffaa00ff, 0xffe254ff));
        mA700.put(ColorType.DEEP_PURPLE, new ColorSet(0xff0a00b6, 0xff6200ea, 0xff9d46ff));
        mA700.put(ColorType.INDIGO, new ColorSet(0xff0026ca, 0xff304ffe, 0xff7a7cff));
        mA700.put(ColorType.BLUE, new ColorSet(0xff0039cb, 0xff2962ff, 0xff768fff));
        mA700.put(ColorType.LIGHT_BLUE, new ColorSet(0xff0064b7, 0xff0091ea, 0xff64c1ff));
        mA700.put(ColorType.CYAN, new ColorSet(0xff0088a3, 0xff00b8d4, 0xff62ebff));
        mA700.put(ColorType.TEAL, new ColorSet(0xff008e76, 0xff00bfa5, 0xff5df2d6));
        mA700.put(ColorType.GREEN, new ColorSet(0xff009624, 0xff00c853, 0xff5efc82));
        mA700.put(ColorType.LIGHT_GREEN, new ColorSet(0xff1faa00, 0xff64dd17, 0xff9cff57));
        mA700.put(ColorType.LIME, new ColorSet(0xff79b700, 0xffaeea00, 0xffe4ff54));
        mA700.put(ColorType.YELLOW, new ColorSet(0xffc7a500, 0xffffd600, 0xffffff52));
        mA700.put(ColorType.AMBER, new ColorSet(0xffc67c00, 0xffffab00, 0xffffdd4b));
        mA700.put(ColorType.ORANGE, new ColorSet(0xffc43c00, 0xffff6d00, 0xffff9e40));
        mA700.put(ColorType.DEEP_ORANGE, new ColorSet(0xffa30000, 0xffdd2c00, 0xffff6434));
        M_A700 = Collections.unmodifiableMap(mA700);
    }

    public static ColorType findColorType(ColorSet colorSet) {
        ReactiveList<ColorSet> colorSets = new ReactiveList<>(M_A700.keySet()).map(M_A700::get);
        int index = colorSets.indexOf(x -> x.equals(colorSet));
        if (index > -1) {
            return new ReactiveList<>(M_A700.keySet()).get(index);
        }
        return null;
    }
}
